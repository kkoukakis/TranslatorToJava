/* .cup file for TranslatorToJava Project */
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;
import java.util.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            COMMA, LPAREN, RPAREN, BEGIN, END /*, RPAREN_BEGIN*/;//hack
terminal            CONCAT, REVERSE, PREFIX;
terminal            IF, ELSE;
terminal String     IDENTIFIER, STRING_LITERAL;        

/*  Non terminals */
non terminal program, definitions, calls;                   //program, total definitions, total calls (LISTS)                                  //program <- definitions  calls                     
non terminal definition,rest_definition, call;              //Single definition , single call             
non terminal def_args;                                      // definition(arguments) def_args 
non terminal prefixx, prefixx2;                             // prefix condition
non terminal return_call, return_fcall, return_fcall_args;  //a single call inside return 
non terminal fcall, fcall_args;                             //calling a function and its arguments
//non terminal reverse_call;                                  //do reverse (using reverseX()) [! after reduce we dont need it anymore]  

/**
 *  Precedence Declarations
 */
precedence left REVERSE;
precedence left PREFIX;
precedence left IF, ELSE;
precedence left CONCAT;

/**
 *  The Grammar Rules
 */

start with program;

// program  <-- definitions calls   
program     ::=  definitions:defs calls:cls              
            {:  // import java.util.* for stringBuffer and .reverse()
                System.out.println("import java.util.*;\n\n");
                System.out.println("public class Output {");
                 
                //reverseX() function 
                System.out.println("\t//Reverse()"+"\n\tpublic static String reverseX(String str){");
                System.out.println("\n\t\tStringBuilder sb=new StringBuilder(str); \n\t\tsb.reverse(); \n\t\treturn sb.toString(); \n\t}");
                 
                //Main starts here
                System.out.println("\n\tpublic static void main(String[] args) {");
                 
                //inside main there are calls
                System.out.println( "\t//CALLS" + cls + " \n\t}\n"); // calls
                 
                //outside main there are definitions
                System.out.println( "\n\t//DEFINITIONS" + defs + "\n}");  // definitions
            :}
;

//definitions <-- definitions definition
//as many definitions we want | 1 definition or last definition   
definitions ::= definitions:defs definition:def 
            {:
                RESULT = defs + "\n\t" + def;
            :}
            | definition:def                                            
            {:
                RESULT = "\n\t" + def;          
            :}
;

//definition can be With Args or Without Args
definition ::= IDENTIFIER:id LPAREN rest_definition:r1
            {:
                RESULT = "public static String "+ id+"("+r1;
            :}
;

rest_definition::= IDENTIFIER:id1 def_args:d_args RPAREN BEGIN return_call:rc END
            {:
                //ERROR NEVER COMES HERE
                RESULT ="String "+ id1 +" "+ d_args+"){\n\t\treturn "+ rc + ";\n}";
            :}
            | RPAREN BEGIN return_call:rc END
            {:
            //NO ARGS
                RESULT = "){\n\n\t\treturn " + rc +";\n\t}";
            :}
;

def_args  ::= COMMA IDENTIFIER:id def_args:d_args
            {:
                RESULT = ", String " + id + d_args;
            :}  
            | IDENTIFIER:id
            {: 
                RESULT = "String "+ id; 
            :} 
            | 
            {:
                RESULT = "";
            :}
;

return_call ::=  IF LPAREN prefixx2:pref RPAREN return_call:rc1 ELSE return_call:rc2
        {:
            RESULT = "((" + pref + ")?" + rc1 +":"+ rc2+")"; // ternary
        :}
        | return_call:c1 CONCAT return_call:c2
        {:
            RESULT = c1 + " + " + c2; 
        :}
        | STRING_LITERAL:s1
        {:
            RESULT = "\""+ s1 +"\"";
        :}
        | REVERSE return_call:rc
        {:
            RESULT = "reverseX(" + rc +")";
        :}
        | IDENTIFIER:id
        {:
            RESULT = id;
        :}
        | return_fcall:rf
        {:
            RESULT = rf;
        :}
;
prefixx2 ::= return_call:rc1 PREFIX return_call:rc2
        {:
           RESULT = "("+rc2+").startsWith("+rc1+")";
        :} 
    
;

return_fcall ::= IDENTIFIER:id LPAREN return_call:rc return_fcall_args:fc_args RPAREN
        {:
            RESULT = id+"("+rc+fc_args+")";
        :}
        |   IDENTIFIER:id LPAREN RPAREN 
        {:
        /* no args call*/
            RESULT = id+"()";
        :}
;
return_fcall_args ::= COMMA return_call:c1 return_fcall_args:fc_args
            {: //before every argument must exists a comma
                RESULT = " , "+ c1 + fc_args;
            :}
            |
            {: // NO ARGS
                RESULT = ""; 
            :}
;


//-------//
// CALLS //
//-------//
calls  ::= call:cl calls:cls
        {:
            RESULT = "\n\t\tSystem.out.println(" + cl + ");" + cls;
        :}
        | call:cl
        {:
            RESULT = "\n\t\tSystem.out.println(" + cl + ");";
        :}
;

//a call can be a ifstatement
call ::=  IF LPAREN prefixx:pref RPAREN call:c1 ELSE call:c2
        {:
            RESULT = "((" + pref + ")?" + c1 +":"+ c2+")"; // ternary
        :}
        | call:c1 CONCAT call:c2
        {:
            RESULT = c1 + " + " + c2; 
        :}
        | STRING_LITERAL:s1
        {:
            RESULT = "\""+ s1 +"\"";
        :}
        /*
        | IDENTIFIER:id
        {:
            RESULT = id;    
        :}
        */
        | REVERSE call:c1
        {:
            RESULT = "reverseX("+c1+")";
        :}
        | fcall:f
        {:
            RESULT = f;
        :}
;

prefixx ::= call:c1 PREFIX call:c2
        {:
           RESULT = "("+c2+").startsWith("+c1+")";
        :} 
    
;

fcall ::= IDENTIFIER:id LPAREN call:c1 fcall_args:fc_args RPAREN
        {:
            RESULT = id+"("+c1+fc_args+")";
        :}
        |   IDENTIFIER:id LPAREN RPAREN 
        {:
        /* no args call*/
            RESULT = id+"()";
        :}
;

fcall_args ::= COMMA call:c1 fcall_args:fc_args
            {: //before every argument must exists a comma
                RESULT = " , "+ c1 + fc_args;
            :}
            |
            {: // NO ARGS
                RESULT = ""; 
            :}
;


//---------// 
// Helping //
//---------//

//reverse_call ::= REVERSE
//            {:
//                RESULT = "reverseX(";
//            :}
//;
// reduced