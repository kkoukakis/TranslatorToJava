/* .cup file for TranslatorToJava Project */
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;
import java.util.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */

scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            COMMA, LPAREN, RPAREN, /*BEGIN,*/ END; // starting bracket was replaced with hack
terminal            RPAREN_BEGIN;          /*hacks some didnt work out :P */
terminal            CONCAT, REVERSE, PREFIX;            //operators
terminal            IF, ELSE;
terminal            IDENTIFIER, STRING_LITERAL;        

/*  Non terminals */
non terminal program;                                  //goal program
non terminal definitions;                              //definition list (total definitions)
non terminal calls;                                    //call list (total calls)                                             
non terminal definition;                               //start a definition
non terminal rest_definition;                          //factoring for definition
non terminal definition_args;                          //arguments that you can pass by in a definition
non terminal definition_args_rest;                     // definitions args rest
non terminal definition_expr;                          //core expression of definition
non terminal definition_functioncall;                  //call a function inside a definition
non terminal rest_definition_functioncall;             //rest code of calling a function inside a definition
non terminal definition_functioncall_args;             //and its arguments
non terminal definition_prefix;                        //apply prefix in a definition
non terminal call;                                     //core call expr(cannot take identifier)
non terminal call_functioncall;                        //calling a function 
non terminal rest_call_functioncall;                   //rest calling a function 
non terminal call_functioncall_args;                   //and its arguments
non terminal call_prefix;                              //apply prefix in a call
non terminal empty;                                    // epsilon

/**
 *  Precedence Declarations
 */

precedence left REVERSE;
precedence left PREFIX;
precedence left IF, ELSE;
precedence left CONCAT;

/**
 *  The Grammar Rules
 */

start with program;

// program  <-- definitions calls   
program     ::=  definitions:defs calls:cls              
            {:  // import java.util.* for stringBuffer and .reverse()
                System.out.println("import java.util.*;\n\n");
                System.out.println("public class Output {");
                 
                //reverseX() function 
                System.out.println("\t//Reverse()"+"\n\tpublic static String reverseX(String str){");
                System.out.println("\n\t\tStringBuilder sb=new StringBuilder(str); \n\t\tsb.reverse(); \n\t\treturn sb.toString(); \n\t}");
                 
                //Main starts here
                System.out.println("\n\tpublic static void main(String[] args) {");
                 
                //inside main there are calls
                System.out.println( "\t//CALLS" + cls + " \n\t}\n"); // calls
                 
                //outside main there are definitions
                System.out.println( "\n\t//DEFINITIONS" + defs + "\n}");  // definitions
            :}
;

//definitions <-- definitions definition
//as many definitions we want | 1 definition or last definition   
definitions ::= definitions:defs definition:def 
            {:
                RESULT = defs + "\n\t" + def;
            :}
            | definition:def                                            
            {:
                RESULT = "\n\t" + def;          
            :}
;

//definition can be With Args or Without Args
definition ::= IDENTIFIER:id LPAREN rest_definition:rd
            {:
                RESULT = "public static String "+ id+"("+rd;
            :}
;

rest_definition::= IDENTIFIER:id definition_args:d_args RPAREN_BEGIN definition_expr:de END
            {:
                //ERROR NEVER COMES HERE -> solved
                RESULT ="String "+ id +" "+ d_args+"){\n\t\treturn "+ de + ";\n}";
            :}
            | RPAREN_BEGIN definition_expr:de END
            {:
                
                RESULT = "){\n\n\t\treturn " + de +";\n\t}";
            :}
;

definition_args  ::= COMMA definition_args_rest:dar
            {:
                RESULT = ", String " + dar;
            :}  
            | definition_args_rest:dar
            {: 
               // RESULT = "String "+ id + d_args;  error id1 id2
                RESULT = "String "+ dar; 
            :} 
            | empty:e
            {:
                RESULT = e;
            :}
;

definition_args_rest ::= IDENTIFIER:id definition_args:d_args
        {:
            RESULT = id+""+d_args;
        :}
;
definition_expr ::=  IF LPAREN definition_prefix:pref RPAREN definition_expr:de1 ELSE definition_expr:de2
        {:
            RESULT = "((" + pref + ")?" + de1 +":"+ de2+")"; // ternary
        :}
        | REVERSE definition_expr:rc
        {:
            RESULT = "reverseX(" + rc +")";
        :}
        | definition_expr:de1 CONCAT definition_expr:de2
        {:
            RESULT = de1 + " + " + de2; 
        :}
        | IDENTIFIER:id
        {:
            RESULT = id;
        :}
        | STRING_LITERAL:str
        {:
            RESULT = "\""+ str +"\"";
        :}
        | definition_functioncall:dfc
        {:
            RESULT = dfc;
        :}

;

definition_prefix ::= definition_expr:de1 PREFIX definition_expr:de2
        {:
           RESULT = "("+de2+").startsWith("+de1+")";
        :} 
;

definition_functioncall ::= IDENTIFIER:id LPAREN rest_definition_functioncall:rdf 
        {:
            RESULT = id +""+ rdf;               
        :}
;
rest_definition_functioncall ::= definition_expr:rc definition_functioncall_args:dfc_args RPAREN
        {:
            RESULT = "("+rc+dfc_args+")";
        :}
        |   RPAREN
        {:
        /* no args call*/
            RESULT = "()";
        :}
;
definition_functioncall_args ::= COMMA definition_expr:c1 definition_functioncall_args:dfc_args
            {: //before every argument must exists a comma
                RESULT = " , "+ c1 + dfc_args;
            :}
            | empty:e
            {: // NO ARGS -> EMPTY
                RESULT = e; 
            :}
;


//-------//
// CALLS //
//-------//
calls  ::= call:cl calls:cls
        {:
            RESULT = "\n\t\tSystem.out.println(" + cl + ");" + cls;
        :}
        | call:cl
        {:
            RESULT = "\n\t\tSystem.out.println(" + cl + ");";
        :}
;

//a call can be a ifstatement
call ::=  IF LPAREN call_prefix:pref RPAREN call:c1 ELSE call:c2
        {:
            RESULT = "((" + pref + ")?" + c1 +":"+ c2+")"; // ternary
        :}
        | call:c1 CONCAT call:c2
        {:
            RESULT = c1 + " + " + c2; 
        :}
        | STRING_LITERAL:s1
        {:
            RESULT = "\""+ s1 +"\"";
        :}
        /*

        | IDENTIFIER:id  // calls don't take identifiers
        {:               // calls don't take identifiers 
            RESULT = id; // calls don't take identifiers   
        :}               // calls don't take identifiers
        
        */
        | REVERSE call:c1
        {:
            RESULT = "reverseX("+c1+")";
        :}
        | call_functioncall:f
        {:
            RESULT = f;
        :}
;

call_prefix ::= call:c1 PREFIX call:c2
        {:
           RESULT = "("+c2+").startsWith("+c1+")";
        :} 
    
;


call_functioncall ::= IDENTIFIER:id LPAREN rest_call_functioncall:rcf
                {:
                        RESULT = id + "" +rcf;
                :}
;

rest_call_functioncall ::=  call:c1 call_functioncall_args:fc_args RPAREN
        {:
            RESULT = "("+c1+fc_args+")";
        :}
        |   RPAREN
        {:
        /* no args call*/
            RESULT = "()";
        :}
;

call_functioncall_args ::= COMMA call:c1 call_functioncall_args:fc_args
            {: //before every argument must exists a comma
                RESULT = " , "+ c1 + fc_args;
            :}
            | empty:e
            {:  
                RESULT = e; 
            :}
;


//---------// 
// Helping //
//---------//

/*reverse_call ::= REVERSE
            {:
                RESULT = "reverseX(";
            :}
;
 reduced*/


 empty ::= /* epsilon */
        {:
            RESULT = "";
        :}
 ;